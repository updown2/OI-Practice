#include<bits/stdc++.h>
using namespace std;
//typedef long long ll;
//#define int ll
#define For(i, a, b) for(int i=a; i<b; i++)
#define ffi For(i, 0, N)
#define ffj For(j, 0, M)
#define ffa ffi ffj
#define w cout
#define e "\n"
#define s <<" "<<
#define pb push_back
/// 500,000,000
const int MAXN = 20000;
/// Global Variables
int N, M, val[MAXN], out[MAXN+1], at = 1;
vector<int> adj[MAXN];

struct trie {
    int go[26]; /// index of the next nodes from alphabet "lettering"
    int ind; /// index of the answer. MAXN if it isn't an answer
    int letter; /// 0-25 (a-z). letter of the alphabet that this node is
    trie () {
        For (i, 0, 26) go[i] = -1;
        ind = MAXN;
        letter = -1;
    }
} tree[MAXN]; /// tree[0] is the source node

void add(string a, int aloc, int tloc, int save) {
    if (aloc == a.length()) {
        tree[tloc].ind = save;
        //w<< "final" s tloc<<e;
        return;
    }
    //w<< a[aloc] s tloc<<e;
    int let = a[aloc] - 'a'; /// letter of the next node
    if (tree[tloc].go[let] == -1) {
        /// letter doesn't exists
        tree[tloc].go[let] = at;
        tree[at].letter = let;
        at++;
    }
    /// letter now exists
    add(a, aloc+1, tree[tloc].go[let], save);
}
void go(int treen, int trien, int p) {
    trien = tree[trien].go[val[treen]];
    if (trien == -1) return;
    /// see if we have an answer
    out[tree[trien].ind]++;
    /// dfs
    for (int i: adj[treen]) if (i != p) go(i, trien, treen);
}

main () {
    //ifstream cin("test.in");
    ios_base::sync_with_stdio(0); cin.tie(0);
    cin >> N >> M;
    ffi {char a; cin >> a; val[i] = a-'a';}
    For (i, 1, N) {int a, b; cin >> a >> b; a--; b--; adj[a].pb(b); adj[b].pb(a);}
    ffj {
        string a; cin >> a;
        //w<< "adding" s a<<e;
        add(a, 0, 0, j);
    }
    //For (i, 0, at) if (tree[i].ind != -1) w<< i s tree[i].ind<<e;
    ffi {
        /// for every node as a starting point
        go(i, 0, -1);
    }
    ffj w<< out[j]<<e;
}