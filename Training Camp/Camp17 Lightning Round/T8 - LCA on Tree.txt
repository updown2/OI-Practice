#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
#define For(i, a, b) for(ll i=a; i<b; i++)
#define ffi For(i, 0, N)
#define ffj For(j, 0, M)
#define s <<" "<<
#define w cout
#define e endl
#define pb push_back
#define mp make_pair
#define a first
#define b second
//500,000,000 operations
//Global Variables
int depth[100001];
int parent[100001];
vector <vector<int> > adj;
int ancestor[100001][20];
int N, Q;
 
void dfs(int x, int par) {
	parent[x] = par;
	depth[x] = depth[par]+1;
 
	For (i, 1, adj[x][0]+1) {
		if (adj[x][i] != par) {
			dfs(adj[x][i], x);
		}
	}
}
 
 
int LCA(int A, int B) {
	if (depth[A] > depth[B]) swap(A, B);
	int d = depth[B] - depth[A];
	For (i, 0, 18) {
		if (d&(1<<i) ) B = ancestor[B][i];
	}
	if (A == B) return A;
 
	for (int i=17; i>= 0; i--) {
		if (ancestor[A][i] != ancestor[B][i]) {
			A = ancestor[A][i];
			B = ancestor[B][i];
		}
	}
	return parent[A];
}
 
int main() {
	//ifstream cin ("test.in");
 
	vector <int> use;
 
	For (i, 0, 100001) {
		adj.push_back(use);
	}
 
	cin >> N >> Q;
	For (i, 0, N+1) {
		adj[i].push_back(0);
	}
	adj[0][0] = 1;
	adj[0].push_back(1);
	adj[1][0] = 1;
	adj[1].push_back(0);
 
	For (i, 0, N-1) {
		int a, b;
		cin >> a >> b;
 
		adj[a][0] ++;
		adj[a].push_back(b);
 
		adj[b][0] ++;
		adj[b].push_back(a);
	}
 
	depth[0] = 0;
	dfs(1, 0);
 
	For (i, 0, N+1) ancestor[i][0] = parent[i];
 
 
	For (k, 0, 17) {
		For (i, 1, N+1) ancestor[i][k+1] = ancestor[ancestor[i][k]][k];
	}
 
	For (i, 0, Q) {
		int a, b;
		cin >> a >> b;
		w << LCA(a, b) << e;
	}
	return 0;
}