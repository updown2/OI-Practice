#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
#define For(i, a, b) for(int i=a; i<b; i++)
#define ffi For(i, 0, N)
#define ffj For(j, 0, C)
#define ffa For (i, 0, R) ffj
#define s <<" "<<
#define w cout
#define e "\n"
#define pb push_back
#define mp make_pair
#define a first
#define b second
#define int ll
const int MAXN=200, INF=1000000000, MAXR=20;
///500,000,000
int N, R, C, loc[MAXN][2], dp[MAXR][MAXR][MAXR][MAXR], out = INF, curr;
queue <pair<int, pair<int, int> > > next1;
multiset <int> opt;

main() {
	//ifstream cin ("test.in");
	ios_base::sync_with_stdio(0); cin.tie(0);
	cin >> N >> R >> C;
	ffi {cin >> loc[i][0] >> loc[i][1]; loc[i][0]--; loc[i][1]--;}
	For (k, 0, R) For (l, 0, C) {
        ffa dp[k][l][i][j] = INF;
        next1.push(mp(0, mp(k, l)));
        while (!next1.empty()) {
            int m = next1.front().a, x = next1.front().b.a, y = next1.front().b.b; next1.pop();
            if (x < 0 || y < 0 || x >= R || y >= C || dp[k][l][x][y] != INF) continue;
            dp[k][l][x][y] = m;
            next1.push(mp(m+1, mp(x-1, y-2)));
            next1.push(mp(m+1, mp(x-1, y+2)));
            next1.push(mp(m+1, mp(x+1, y-2)));
            next1.push(mp(m+1, mp(x+1, y+2)));
            next1.push(mp(m+1, mp(x-2, y-1)));
            next1.push(mp(m+1, mp(x-2, y+1)));
            next1.push(mp(m+1, mp(x+2, y-1)));
            next1.push(mp(m+1, mp(x+2, y+1)));
        }
        //For (i, 0, R) {ffj w<< dp[k][l][i][j]<< " "; w<<e;}w<<e;
    }
    ffa For (m, 0, R) For (l, 0, C) if (i != m || j != l) {
        /// Picked two knights
        //w<< i s j s "," s m s l s ":"<<e;
        curr = 0, opt.clear();
        For (k, 0, N) {
            curr += dp[i][j][loc[k][0]][loc[k][1]];
            opt.insert(dp[m][l][loc[k][0]][loc[k][1]] - dp[i][j][loc[k][0]][loc[k][1]]);
            //w<< dp[m][l][loc[k][0]][loc[k][1]] s dp[i][j][loc[k][0]][loc[k][1]]<<e;
        }
        For (k, 0, N/2) {
            curr += *opt.begin();
            opt.erase(opt.begin());
        }
        //w<< curr<<e;
        out = min(out, curr);
    }
    w<< out <<e;
}