#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
#define int ll
#define For(i, a, b) for(int i=a; i<b; i++)
#define ffi For(i, 0, N)
#define ffj For(j, 0, N)
#define w cout
#define e "\n"
#define s <<" "<<
#define a first
#define b second
#define pb push_back
#define pf push_front
#define mp make_pair
#define int ll
const int MAXN = 2000001, INF=10000000000000000, MOD = 1000000007;
////////////////////////////////////////////////////////
int N, tcnt[4*(MAXN+10000)], ttot[4*(MAXN+10000)], lazy[4*(MAXN+10000)];

void push(int x, int L, int R) {
    if (lazy[x] < -INF/2) {
        int val = lazy[x] + INF;
        tcnt[x] = val*(R-L+1);
        ttot[x] = val*((R*(R+1) - L*(L-1))/2);
        if (L != R) lazy[x*2] = lazy[x*2+1] = lazy[x];
        lazy[x] = 0;
        return;
    }
    tcnt[x] += lazy[x]*(R-L+1);
    ttot[x] += lazy[x]*((R*(R+1) - L*(L-1))/2);
    if (L != R) lazy[2*x] += lazy[x], lazy[2*x+1] += lazy[x];
    lazy[x] = 0;
}
void update(int x, int L, int R, int oL, int oR, int v) {
    if (oR < oL) return;
    push(x, L, R);
    //if (v == -1) w<< x s L s R s /*oL s oR s v s*/ ":" s tcnt[x] s ttot[x]<<e;
    if (oR < L || R < oL) return;
    if (oL <= L && R <= oR) {
        lazy[x] += v;
        if (v == -INF) lazy[x] = v;
        //if (v == -1) w<< "before push" s x s L s R s /*oL s oR s v s*/ ":" s lazy[x]<<e;
        push(x, L, R);
        //if (v == -1) w<< "end" s x s L s R s /*oL s oR s v s*/ ":" s tcnt[x] s ttot[x]<<e;
        return;
    }
    update(x*2, L, (L+R)/2, oL, oR, v), update(x*2+1, (L+R)/2+1, R, oL, oR, v);
    tcnt[x] = tcnt[x*2] + tcnt[x*2+1];
    ttot[x] = ttot[x*2] + ttot[x*2+1];
    //if (v == -1) w<< "end" s x s L s R s /*oL s oR s v s*/ ":" s tcnt[x] s ttot[x]<<e;
}
int query_cnt(int x, int L, int R, int oL, int oR) {
    if (oR < oL) return 0;
    push(x, L, R);
    if (oR < L || R < oL) return 0;
    if (oL <= L && R <= oR) return tcnt[x];
    return query_cnt(x*2, L, (L+R)/2, oL, oR) + query_cnt(x*2+1, (L+R)/2+1, R, oL, oR);
}
int query_tot(int x, int L, int R, int oL, int oR) {
    if (oR < oL) return 0;
    push(x, L, R);
    if (oR < L || R < oL) return 0;
    if (oL <= L && R <= oR) return ttot[x];
    return query_tot(x*2, L, (L+R)/2, oL, oR) + query_tot(x*2+1, (L+R)/2+1, R, oL, oR);
}

main() {
	//ifstream cin ("test.in");
	ios_base::sync_with_stdio(0); cin.tie(0);
	cin >> N;
	ffi {
	    string in; int a, b;
        cin >> in;
        if (in == "ADD") {
            cin >> a >> b;
            update(1, 0, MAXN, b, b, a);
        }
        if (in == "ADDRANGE") {
            cin >> a >> b;
            update(1, 0, MAXN, a, b, 1);
        }
        if (in == "BUYAMT") {
            cin >> a;
            int c = 0, d = MAXN-1;
            /// take all up to c-1 and some of c
            while (c != d) {
                int mid = (c+d)/2;
                //w<< c s d s ":" s mid<<e;
                int x = query_tot(1, 0, MAXN, 0, mid);
                //w<< mid s x<<e;
                if (x <= a) c = mid+1;
                else d = mid;
            }
            //w<< "c:" s c<<e;
            int cost = query_tot(1, 0, MAXN, 0, c-1);
            int opt = query_cnt(1, 0, MAXN, c, c);
            w<<query_cnt(1, 0, MAXN, 0, c-1) + min(opt, (a-cost)/c)<<e;
            update(1, 0, MAXN, 0, c-1, -INF), update(1, 0, MAXN, c, c, -(min(opt, (a-cost)/c)));
        }
        if (in == "BUYLOW") {
            cin >> a;
            int c = 0, d = MAXN-1;
            /// take all up to c-1 and some of c
            while (c != d) {
                int mid = (c+d)/2;
                int x = query_cnt(1, 0, MAXN, 0, mid);
                //w<< mid s x<<e;
                if (x <= a) c = mid+1;
                else d = mid;
            }
            //w<< "c:" s c<<e;
            int cost = query_tot(1, 0, MAXN, 0, c-1);
            int opt = query_cnt(1, 0, MAXN, c, c);
            int got = query_cnt(1, 0, MAXN, 0, c-1);
            w<<cost + c*min(opt, a-got)<<e;
            update(1, 0, MAXN, 0, c-1, -INF); update(1, 0, MAXN, c, c, -min(opt, a-got));
        }
        if (in == "BUYHIGH") {
            cin >> a;
            int c = 0, d = MAXN-1;
            /// take all from to c+1 and some of c
            while (c != d) {
                int mid = (c+d+1)/2;
                int x = query_cnt(1, 0, MAXN, mid, MAXN-1);
                //w<< mid s x<<e;
                if (x <= a) d = mid-1;
                else c = mid;
            }
            //w<< "c:" s c<<e;
            int cost = query_tot(1, 0, MAXN, c+1, MAXN);
            int opt = query_cnt(1, 0, MAXN, c, c);
            int got = query_cnt(1, 0, MAXN, c+1, MAXN);
            w<<cost + c*min(opt, a-got)<<e;
            update(1, 0, MAXN, c+1, MAXN, -INF);
            //w<< c s ":" s opt s a-got<<e;
            update(1, 0, MAXN, c, c, -min(opt, a-got));
        }
        if (in == "COST") {
            cin >> a;
            if (query_cnt(1, 0, MAXN, 0, MAXN-1) < a) {w<<-1<<e; continue;}
            if (a == 0) {assert(false); w<<-1<<e; continue;}
            int c = 0, d = MAXN-1;
            /// take all up to c-1 and some of c
            while (c != d) {
                int mid = (c+d)/2;
                int x = query_cnt(1, 0, MAXN, 0, mid);
                //w<< mid s x<<e;
                if (x < a) c = mid+1;
                else d = mid;
            }
            w<<c<<e;
        }
        if (in == "NUMCONES") w<< query_cnt(1, 0, MAXN, 0, MAXN-1)<<e;
        if (in == "TOTALCOST") w<< query_tot(1, 0, MAXN, 0, MAXN-1)<<e;
	}
}