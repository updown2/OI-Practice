#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
#define For(i, a, b) for(int i=a; i<b; i++)
#define ffi For(i, 0, N)
#define ffj For(j, 0, N)
#define ffa ffi ffj
#define s <<" "<<
#define w cout
#define e endl
#define pb push_back
#define mp make_pair
#define a first
#define b second
//500,000,000 operations
const int MAXN = 200002, K = 20;
//const int MAXN = 2001, K = 11;
//Global Variables
int N, N2, M, out, suffix[MAXN][K*2], p2[K], ran[26];
string a, b, in;
pair<pair<int, int>, int> c_rank[MAXN];
bool gota[MAXN], gotb[MAXN];

void rank_in() {
    /// ranks the individual charactors and puts the ranks in suffix[i][0]
	set<char> in2;
	set<char>::iterator it;
	ffi in2.insert(in[i]);
	map<char, int> rank;
	int i=0;
	for (it = in2.begin(); it != in2.end(); it++, i++) rank[(*it)] = i;
	ffi suffix[i][0] = rank[in[i]];
}
void set_suffix(int k) {
	sort(c_rank, c_rank+N);

	suffix[c_rank[0].b][k] = 0;
	int at = 1;
	For (i, 1, N) {
		if (c_rank[i].a.a == c_rank[i-1].a.a && c_rank[i].a.b == c_rank[i-1].a.b) {
			suffix[c_rank[i].b][k] = at-1;
		}
		else {
			suffix[c_rank[i].b][k] = at;
			at++;
		}
	}
}
bool check(int k) {
    //if (N2 >= 50000) return false;
    ffi gota[i] = gotb[i] = false;
    For (i, 0, N2) gota[suffix[i][k]] = true;
    For (i, N2+1, N) {
        gotb[suffix[i][k]] = true;
        if (gota[suffix[i][k]]) return false;
    }
    return true;
}


int main() {
	//ifstream cin ("test.in");
	ios::sync_with_stdio(0); cin.tie(0);

	cin >> N2 >> M >> a >> b;
	in = a+'$' + b + '#', N = in.length();
	p2[0] = 1; For (i, 1, K) p2[i] = 2*p2[i-1];

	rank_in();

	For (k, 1, K) {
		ffi {
			c_rank[i].b = i;
			c_rank[i].a.a = suffix[i][k-1];
			c_rank[i].a.b = suffix[ (i+p2[k-1]) % N][k-1];
		}
		set_suffix(k);
	}
	//ffi {For (k, 0, /*K*/4) w<< suffix[i][k]<< " "; w<<e;}
	bool fnd = true;
	int next;
	for (int k=K-1; k>=0; k--) {
        if (fnd) {
            fnd = check(k);
            if (!fnd) {
                next = k+1;
                out += (1<<k);
            }
        }
        else {
            ffi {
                c_rank[i].b = i;
                c_rank[i].a.a = suffix[i][next-1];
                c_rank[i].a.b = suffix[ (i+out) % N][k];
            }
            set_suffix(next);
            fnd = check(next);
            if (!fnd) {
                next ++;
                out += (1<<k);
            }
            fnd = false;
        }
	}
	w<< out<<e;
}