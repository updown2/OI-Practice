#include "grader.h"
#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
#define For(i, a, b) for(int i=a; i<b; i++)
#define ffi For(i, 0, n)
#define ffj For(j, 0, n)
#define ffa ffi ffj
#define s <<" "<<
#define w cout
#define e "\n"
#define pb push_back
#define mp make_pair
#define a first
#define b second
//#define int ll
const int MAXN=100000, MOD=1000000009;

int valid(int n, int inputSeq[]) {
    set<int> have;
    ffi have.insert(inputSeq[i]);
    if (have.size() != n) return 0;
    int correct[MAXN];
    ffi if (inputSeq[i] <= n) {
        correct[i] = inputSeq[i];
        For (j, i+1, n) {
            correct[j] = 1+correct[j-1];
            if (correct[j] == n+1) correct[j] = 1;
        }
        correct[0] = 1+correct[n-1];
        if (correct[0] == n+1) correct[0] = 1;
        For (j, 1, i) {
            correct[j] = 1+correct[j-1];
            if (correct[j] == n+1) correct[j] = 1;
        }
        break;
    }
    ffi if (inputSeq[i] != correct[i] && inputSeq[i] <= n) return 0;
    return 1;
}
int replacement(int n, int gondolaSeq[], int replacementSeq[]) {
    int correct[MAXN];
    ffi correct[i] = i+1;
    ffi if (gondolaSeq[i] <= n) {
        correct[i] = gondolaSeq[i];
        For (j, i+1, n) {
            correct[j] = 1+correct[j-1];
            if (correct[j] == n+1) correct[j] = 1;
        }
        correct[0] = 1+correct[n-1];
        if (correct[0] == n+1) correct[0] = 1;
        For (j, 1, i) {
            correct[j] = 1+correct[j-1];
            if (correct[j] == n+1) correct[j] = 1;
        }
        break;
    }
    int at = 0;
    int val = 0, save;
    ffi if (gondolaSeq[i] > val) val = gondolaSeq[i], save = i;
    int loc[250001];
    For (i, 0, 250001) loc[i] = -1;
    ffi loc[gondolaSeq[i]] = i;
    For (i, n+1, val+1) {
        if (loc[i] == -1) {
            replacementSeq[at] = correct[save];
            correct[save] = i;
            at++;
        }
        else {
            replacementSeq[at] = correct[loc[i]];
            correct[loc[i]] = i;
            at++;
        }
    }
    return at;
}
int countReplacement(int n, int inputSeq[]) {
    if (valid(n, inputSeq) == 0) return 0;
    ll ret = 1;
    set<int> have;
    int big = 0;
    ffi if (inputSeq[i] > n) have.insert(inputSeq[i]), big = max(big, inputSeq[i]);
    int at = n+1;
    ll base = have.size();
    ll pb[31];
    for (int i: have) {
        int p = i-at;
        pb[0] = base;
        //w<< base s p <<e;
        For (i, 1, 31) pb[i] = pb[i-1]*pb[i-1], pb[i] %= MOD;
        For (i, 0, 31) if (p & (1<<i)) {
            //w<<i s (1<<i) s pb[i]<<e;
            ret *= pb[i];
            ret %= MOD;
        }
        //w<< ret<<e;
        base--;
        at = i+1;
    }
    bool small = false;
    ffi if (inputSeq[i] <= n) small = true;
    if (!small) ret *= n, ret %= MOD;
    return ret;
}

/*int gondolaSequence[100001], replacementSequence[250001];
int main(){
    //freopen("test.in", "r", stdin);
  int i, n, tag;
  int nr;
  assert(scanf("%d", &tag)==1);
  assert(scanf("%d", &n)==1);
  for(i=0;i< n;i++)
    assert( scanf("%d", &gondolaSequence[i]) ==1);

  switch (tag){
  case 1: case 2: case 3:
    printf("%d\n", valid(n, gondolaSequence));
    break;

  case 4: case 5: case 6:
    nr = replacement(n, gondolaSequence, replacementSequence);
    printf("%d ", nr);
    if (nr > 0)
      {
	for (i=0; i<nr-1; i++)
	  printf("%d ", replacementSequence[i]);
	printf("%d\n", replacementSequence[nr-1]);
      }
    else printf("\n");
    break;

  case 7: case 8: case 9: case 10:
    printf("%d\n",  countReplacement(n, gondolaSequence));
    break;
  }

  return 0;
}
*/
