/*
ID: riya.ar1
PROG: sprime
LANG: C++11
*/
#include <iostream>
#include <fstream>
#include <string>
#include <cmath>

using namespace std;

//Useful Functions
bool is_prime(int num) {
	for (int i=2; i <= sqrt (num); i++) {
		if (num%i == 0) {
  			return false;
		}
	}
	return true;
}

int main() {
    ofstream fout ("sprime.out");
    ifstream fin ("sprime.in");

    //Declair Variables and Read Input
    int N;
    fin >> N;  //CHANGE
    
    //Algo
    //generate one digit super-primes:
    if (N == 1) {
		for (int d1 = 2; d1 <= 9; d1++) {
		  	if (is_prime(d1) == true) {
		  		fout << d1 << endl;  //CHANGE
		  	}
		}
	}
	//generate two digit super-primes:
	if (N == 2) {
		for (int d1 = 2; d1 <= 9; d1++) {	/* only odd; evens aren't so prime */
			for (int d2 = 1; d2 <=9; d2++) {
			    bool out = true;
			  	if (is_prime(10*d1 + d2) == false) {
			  		out = false;
			  	}
			  	if (is_prime(d1) == false) {
			  		out = false;
			  	}
				if (out == true) {
			 		fout << 10*d1 + d2 << endl;  //CHANGE
				}
			}
		}
	}
	//generate three digit super-primes:
	if (N == 3) {
		for (int d1 = 2; d1 <= 9; d1++) {	/* only odd; evens aren't so prime */
			for (int d2 = 1; d2 <=9; d2++) {
				for (int d3 = 1; d3 <=9; d3++) {
				    bool out = true;
				  	if (is_prime(100*d1 + 10*d2 + d3) == false) {
				  		out = false;
				  	}
				  	if (is_prime(10*d1 + d2) == false) {
				  		out = false;
				  	}
				  	if (is_prime(d1) == false) {
				  		out = false;
				  	}
					if (out == true) {
				 		fout << 100*d1 + 10*d2 + d3 << endl;  //CHANGE
					}
				}
			}
		}
	}
	//generate four digit super-primes:
	if (N == 4) {
		for (int d1 = 2; d1 <= 9; d1++) {	/* only odd; evens aren't so prime */
			for (int d2 = 1; d2 <=9; d2++) {
				for (int d3 = 1; d3 <=9; d3++) {
					for (int d4 = 1; d4 <= 9; d4 ++) {
					    bool out = true;
					  	if (is_prime(1000*d1 + 100*d2 + 10*d3 + d4) == false) {
					  		out = false;
					  	}
					  	if (is_prime(100*d1 + 10*d2 + d3) == false) {
					  		out = false;
					  	}
					  	if (is_prime(10*d1 + d2) == false) {
					  		out = false;
					  	}
					  	if (is_prime(d1) == false) {
					  		out = false;
					  	}
						if (out == true) {
					 		fout << 1000*d1 + 100*d2 + 10*d3 + d4 << endl;  //CHANGE
						}
					}
				}
			}
		}
	}
	//generate five digit super-primes:
	if (N == 5) {
		for (int d1 = 2; d1 <= 9; d1++) {
			for (int d2 = 1; d2 <=9; d2++) {
				for (int d3 = 1; d3 <=9; d3++) {
					for (int d4 = 1; d4 <= 9; d4++) {
						for (int d5 = 1; d5 <= 9; d5++) {
						    bool out = true;
						    if (is_prime(10000*d1 + 1000*d2 + 100*d3 + 10*d4+d5) == false) {
						  		out = false;
						  	}
						  	if (is_prime(1000*d1 + 100*d2 + 10*d3 + d4) == false) {
						  		out = false;
						  	}
						  	if (is_prime(100*d1 + 10*d2 + d3) == false) {
						  		out = false;
						  	}
						  	if (is_prime(10*d1 + d2) == false) {
						  		out = false;
						  	}
						  	if (is_prime(d1) == false) {
						  		out = false;
						  	}
							if (out == true) {
						 		fout << 10000*d1 + 1000*d2 + 100*d3 + 10*d4+d5 << endl;  //CHANGE
							}
						}
					}
				}
			}
		}
	}
	//generate six digit super-primes:
	if (N == 6) {
		for (int d1 = 2; d1 <= 9; d1++) {
			for (int d2 = 1; d2 <=9; d2+=2) {
				for (int d3 = 1; d3 <=9; d3+=2) {
					for (int d4 = 1; d4 <= 9; d4+=2) {
						for (int d5 = 1; d5 <= 9; d5+=2) {
							for (int d6 = 1; d6 <=9; d6+=2) {
							    bool out = true;
							    if (is_prime(100000*d1 + 10000*d2 + 1000*d3 + 100*d4 + 10*d5 + d6) == false) {
							  		out = false;
							  	}
							    if (is_prime(10000*d1 + 1000*d2 + 100*d3 + 10*d4+d5) == false) {
							  		out = false;
							  	}
							  	if (is_prime(1000*d1 + 100*d2 + 10*d3 + d4) == false) {
							  		out = false;
							  	}
							  	if (is_prime(100*d1 + 10*d2 + d3) == false) {
							  		out = false;
							  	}
							  	if (is_prime(10*d1 + d2) == false) {
							  		out = false;
							  	}
							  	if (is_prime(d1) == false) {
							  		out = false;
							  	}
								if (out == true) {
							 		fout << 100000*d1 + 10000*d2 + 1000*d3 + 100*d4 + 10*d5 + d6 << endl;  //CHANGE
								}
							}
						}
					}
				}
			}
		}
	}
	//generate seven digit super-primes:
	if (N == 7) {
		for (int d1 = 2; d1 <= 7; d1++) {
			if (is_prime(d1)) {
				for (int d2 = 1; d2 <=9; d2+=2) {
					if (is_prime(10*d1 + d2)) {
						for (int d3 = 1; d3 <=9; d3+=2) {
							if (is_prime(100*d1 + 10*d2 + d3)) {
								for (int d4 = 1; d4 <= 9; d4+=2) {
									if (is_prime(1000*d1 + 100*d2 + 10*d3 + d4)) {
										for (int d5 = 1; d5 <= 9; d5+=2) {
											if (is_prime(10000*d1 + 1000*d2 + 100*d3 + 10*d4 + d5)) {
												for (int d6 = 1; d6 <=9; d6+=2) {
													if (is_prime(100000*d1 + 10000*d2 + 1000*d3 + 100*d4 + 10*d5 + d6)) {
														for (int d7 = 1; d7 <= 9; d7+=2) {
														    if (is_prime(1000000*d1 + 100000*d2 + 10000*d3 + 1000*d4 + 100*d5 + 10*d6 + d7)) {
														 		fout << 1000000*d1 + 100000*d2 + 10000*d3 + 1000*d4 + 100*d5 + 10*d6 + d7 << endl;  //CHANGE
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
	//generate eight digit super-primes:
	if (N == 8) {
		for (int d1 = 2; d1 <= 7; d1++) {
			if (is_prime(d1)) {
				for (int d2 = 1; d2 <=9; d2+=2) {
					if (is_prime(10*d1 + d2)) {
						for (int d3 = 1; d3 <=9; d3+=2) {
							if (is_prime(100*d1 + 10*d2 + d3)) {
								for (int d4 = 1; d4 <= 9; d4+=2) {
									if (is_prime(1000*d1 + 100*d2 + 10*d3 + d4)) {
										for (int d5 = 1; d5 <= 9; d5+=2) {
											if (is_prime(10000*d1 + 1000*d2 + 100*d3 + 10*d4 + d5)) {
												for (int d6 = 1; d6 <=9; d6+=2) {
													if (is_prime(100000*d1 + 10000*d2 + 1000*d3 + 100*d4 + 10*d5 + d6)) {
														for (int d7 = 1; d7 <= 9; d7+=2) {
														    if (is_prime(1000000*d1 + 100000*d2 + 10000*d3 + 1000*d4 + 100*d5 + 10*d6 + d7)) {
														    	for (int d8 = 1; d8<=9; d8+=2) {
																if (is_prime(10000000*d1 + 1000000*d2 + 100000*d3 + 10000*d4 + 1000*d5 + 100*d6 + 10*d7 + d8)) {
														 			fout << 10000000*d1 + 1000000*d2 + 100000*d3 + 10000*d4 + 1000*d5 + 100*d6 + 10*d7 + d8 << endl;  //CHANGE
}
														    	}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
    
    return 0;
}