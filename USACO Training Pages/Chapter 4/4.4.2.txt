/*
ID: riya.ar1
PROG: milk6
LANG: C++11
*/
#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
#define For(i, a, b) for(ll i=a; i<b; i++)
#define ffi For(i, 0, N)
#define ffj For(j, 0, M)
#define s <<" "<<
#define w cout
#define e endl
#define p prllf
#define r scanf
#define pb push_back
#define mp make_pair
#define a first
#define b second
//500,000,000 operations
 
//Global Variables
ll N, M;
ll res[201][201]; //(N+1) x (N+1) grid
bool visited[701];
vector<ll> adj[201];
ll source, sink;
 
void connect(ll a, ll b, ll c) {
	res[a][b] += c;
	For (i, 0, adj[a].size()) {
		if (adj[a][i] == b) {
			return;
		}
	}
	adj[a].push_back( b );
	adj[b].push_back( a );
 
}
 
ll dfs(ll x, ll cap=10000000/*INF*/) {
	visited[x] = true;
	if (x==sink) return cap; //If you are done and can only take cap things, return cap(you're all done)
 
	For (i, 0, adj[x].size()) {
		if (!visited[adj[x][i]]) {
			if (res[x][adj[x][i]] > 0) {
				ll cur = dfs(adj[x][i], min(cap, res[x][adj[x][i]]));
				if (cur > 0) {
					res[x][adj[x][i]] -= cur;
					res[adj[x][i]][x] += cur;
					return cur;
				}
			}
		}
	}
 
 
	return 0;
}
 
ll maxflow() {
	//Finds the max flow from source to the sink
	ll flow = 0;
	while (true) {
		For (i, 0, N+1) {
			visited[i] = false;
		}
		ll cur = dfs(source);
		//cout << cur << endl;
		if (cur == 0) break;
		flow += cur;
		
	}
	return flow;
}

void search(ll at) {
	if (visited[at]) return;
	visited[at] = true;
	For (i, 0, adj[at].size()) {
		if (res[at][adj[at][i]] > 0) {
			search(adj[at][i]);
		}
	}
}

ll routes[1000][3];
ll min_c = 1000000;
 
int main() {
	ifstream cin ("milk6.in");
	ofstream cout ("milk6.out");
	
	cin >> N >> M; //M is edges, N is nodes
	source = 1;
	sink = N;
	
	For (i, 1, N+1) For (j, 1, N+1) res[i][j] = 0;
	
	For (i, 0, M) {
		ll a, b, c;
		cin >> a >> b >> c;
		connect(a, b, c*10000+1000+i);
		min_c = min(min_c, c);
		
		routes[i][0] = a; routes[i][1] = b; routes[i][2] = c;
	}
	maxflow();
	
	For (i, 1, N) visited[i] = false;
	search(1);
	
	ll out1 = 0;
	ll out2 = 0;
	
	For (i, 0, M) {
		if (visited[routes[i][0]] && !visited[routes[i][1]]) {
			out1 += routes[i][2];
			out2++;
		}
	}
	w<< out1 s out2<<e;
	For (i, 0, M) {
		if (visited[routes[i][0]] && !visited[routes[i][1]]) {
			w<< i+1<<e;
		}
	}
	
	
	return 0;
	
}

