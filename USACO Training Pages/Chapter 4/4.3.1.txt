/*
ID: riya.ar1
PROG: buylow
LANG: C++11
*/
#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
#define For(i, a, b) for(ll i=a; i<b; i++)
#define ffi For(i, 0, N)
#define ffj For(j, 0, M)
#define s <<" "<<
#define w cout
#define e endl
#define pb push_back
#define mp make_pair
#define a first
#define b second
//500,000,000 operations

int compare(string a, string b) {
	//Returns -1 is a is smaller, 0 if equal, 1, if a is bigger
	if (a.length() > b.length()) return 1;
	if (a.length() < b.length()) return -1;
	For (i, 0, a.length()) {
		if (a[i] > b[i]) return 1;
		if (a[i] < b[i]) return -1;
	}
	return 0;
}
string add(string a, string b) {
	if (a.length() > b.length()) {
		string use = "";
		For (i, 0, a.length()-b.length()) use += "0";
		b = use + b;
	}
	else {
		string use = "";
		For (i, 0, b.length()-a.length()) use += "0";
		a = use + a;
	}
	
	string out = "";
	int carry = 0;
	for (int i=a.length()-1; i>=0; i--) {
		int c = a[i]-'0';
		int d = b[i]-'0';
		int sum = c+d+carry;
		carry = sum/10;
		char e = '0' + (sum % 10);
		out += e;
	}
	
	if (carry != 0) {
		char e = '0' + (carry);
		out += e;
	}
	
	For (i, 0, out.length()/2) {
		swap(out[i], out[out.length()-1-i]);
	}
	return out;
}


//Global Variables
int N;
int prices[6000];
int total[6000];
string num[6000];
int outA = 0;
string outB = "0";

int main() {
	ifstream cin ("buylow.in");
	ofstream cout ("buylow.out");
	
	cin >> N;
	ffi {
		cin >> prices[i];
	}
	
	int use;
	for (int i=0; i<N; i++) {
		use = 0;
		
		For (j, 0, i) {
			if (prices[i] < prices[j]) {
				use = max(use, total[j]);
			}
		}
		total[i] = use+1;
		
		if (total[i] == 1) num[i] = "1";
		else num[i] = "0";
		
		for (int j=i-1; j>=0; j--) {
			if (total[j] == use && prices[i] < prices[j]) {
				num[i] = add(num[i], num[j]);
			}
			if ( total[j] == total[i] && prices[i] == prices[j]) {
				total[j] --;
			}
		}
		
		outA = max(outA, total[i]);
			
	}
	
	for (int i=N-1; i>=0; i--) {
		//w<< total[i] s num[i]<<e;
		if (total[i] == outA) {
			//w<<"ADDING" s outB s "and" s num[i];
			outB = add(outB, num[i]);
			//w<<"got" s outB <<e;
		}
	}
	
        
	w<< outA s outB<<e;
 
 
	return 0;
 
}


