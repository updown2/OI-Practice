/*
ID: riya.ar1
PROG: snail
LANG: C++11
*/
#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
#define For(i, a, b) for(int i=a; i<b; i++)
#define ffi For(i, 0, N)
#define ffj For(j, 0, N)
#define ffa ffi ffj
#define s <<" "<<
#define w cout
#define e endl
#define pb push_back
#define mp make_pair
#define a first
#define b second
//500,000,000 operations
//Global Variables
int N, B;
bool blocked[120][120];
bool visited[120][120];
int out = 0;

void dfs(int x, int y, int dir, int moves) { //dir: 0-left, 1-right, 2-up, 3-down
	if (x < 0 || y < 0 || x >= N || y >= N || blocked[x][y] || visited[x][y]) return;
	
	//w<< x s y s dir <<e;
	
	visited[x][y] = true;
	out = max(out, moves);
	
	if (dir == 0) {
		if (y == 0 || (y > 0 && blocked[x][y-1]) ) {
			dfs(x-1, y, 2, moves+1);
			dfs(x+1, y, 3, moves+1);
		}
		else dfs(x, y-1, 0, moves+1);
	}
	else if (dir == 1) {
		if (y == N-1 || (y < N-1 && blocked[x][y+1]) ) {
			dfs(x-1, y, 2, moves+1);
			dfs(x+1, y, 3, moves+1);
		}
		else dfs(x, y+1, 1, moves+1);
	}
	else if (dir == 2) {
		if (x == 0 || (x>0 && blocked[x-1][y]) ) {
			dfs(x, y-1, 0, moves+1);
			dfs(x, y+1, 1, moves+1);
		}
		else dfs(x-1, y, 2, moves+1);
	}
	else {
		if (x == N-1 || (x<N-1 && blocked[x+1][y]) ) {
			dfs(x, y-1, 0, moves+1);
			dfs(x, y+1, 1, moves+1);
		}
		else dfs(x+1, y, 3, moves+1);
	}
	
	visited[x][y] = false;
}

int main() {
	ifstream cin ("snail.in");
	ofstream cout ("snail.out");
	
	cin >> N >> B;
	ffa {
		blocked[i][j] = false;
		visited[i][j] = false;
	}
	
	For (i, 0, B) {
		char a; int b;
		cin >> a >> b;
		blocked[a-'A'][b-1] = true;
	}
	
	dfs(0, 0, 1, 1);
	dfs(0, 0, 3, 1);
	
	w<<out<<e;
}

