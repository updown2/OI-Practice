/*
Hashing. Save the hash value at each location.
Add letters to the current string and delete if hit any words.
*/
#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
#define int ll
#define For(i, a, b) for(int i=a; i<b; i++)
#define ffi For(i, 0, N)
#define ffj For(j, 0, M)
#define ffa ffi ffj
#define s <<" "<<
#define w cout
#define e "\n"
#define pb push_back
#define mp make_pair
#define a first
#define b second
//#define int ll
//500,000,000 operations
const int MAXN = 1000000, MOD = 1000000009;
//Global Variables
int N, M, hsh[MAXN], p = 2, ans;
string a, b, out;

int power(int x, int y) {
    /// returns x^y
    if (y == 0) return 1;
    if (y == 1) return x;
    int ret = power(x, y/2);
    ret *= ret;
    ret %= MOD;
    if (y%2 == 1) ret *= x, ret %= MOD;
    //w<< x s y s ":" s ret<<e;
    return ret;
}

main() {
	ifstream cin ("censor.in"); ofstream cout ("censor.out");
	//ifstream cin ("test.in");
	ios_base::sync_with_stdio(0); cin.tie(0);
	cin >> a >> b; N = a.length(), M = b.length();
	ffj {
	    ans += (b[j]-'a'+1)*power(p, j);
	    ans %= MOD;
	}
	//w<< ans<<e;
	int i = 0;
	For (loc, 0, N) {
        ///11
        out += a[loc];
        if (out.size() < M) {
            if (i == 0) hsh[i] = (out[i]-'a'+1);
            else hsh[i] = hsh[i-1] + (out[i]-'a'+1)*power(p, i);
            hsh[i] %= MOD;
            //w<< i s hsh[i] s ":" s out<<e;
            //w<< hsh[i-1]<<e;
            i++;
        }
        else {
            if (out.size() == M) hsh[i] = hsh[i-1] + ((out[i]-'a'+1)*power(p, M-1))%MOD;
            else hsh[i] = (((hsh[i-1]-(out[i-M]-'a'+1)+MOD)%MOD)*power(p, MOD-2))%MOD + ((out[i]-'a'+1)*power(p, M-1))%MOD;
            //w<< hsh[i] s (hsh[i-1]-(out[i-M]-'a'+1)+MOD)%MOD/*power(p, MOD-2)*/<<e;
            hsh[i] %= MOD;
            //w<< i s ":" s hsh[i] s "," s out<<e;
            if (hsh[i] == ans) {
                //w<< "FOUND AT" s i<<e;
                ffj out.pop_back();
                i -= M;
                //w<< "new:" s out s i<<e;
            }
            i++;
        }
	}
	w<< out<<e;
}