#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
#define For(i, a, b) for(int i=a; i<b; i++)
#define ffi For(i, 0, N)
#define ffj For(j, 0, M)
#define ffa ffi ffj
#define s <<" "<<
#define w cout
#define e "\n"
#define pb push_back
#define mp make_pair
#define x first
#define y second
//#define int ll
const int MAXN=100000;//, INF=1000000000000000000;
///500,000,000
int N, Q, gain[4*MAXN+1], dist[4*MAXN+1];
pair<int, int> loc[MAXN];
int get_dist(int i, int j) {
    return abs(loc[i].x-loc[j].x) + abs(loc[i].y-loc[j].y);
}

void up_gain(int ind, int L, int R, int x, int val) {
    if (x < L || R < x) return;
    if (L == R) {
        gain[ind] = val;
        return;
    }
    int mid = (L+R)/2;
    up_gain(ind*2, L, mid, x, val), up_gain(ind*2+1, mid+1, R, x, val);
    gain[ind] = max(gain[ind*2], gain[ind*2+1]);
}
void up_dist(int ind, int L, int R, int x, int val) {
    if (x < L || R < x) return;
    if (L == R) {
        dist[ind] = val;
        return;
    }
    int mid = (L+R)/2;
    up_dist(ind*2, L, mid, x, val), up_dist(ind*2+1, mid+1, R, x, val);
    dist[ind] = dist[ind*2] + dist[ind*2+1];
}

int q_gain(int ind, int L, int R, int oL, int oR) {
    if (oR < L || R < oL) return 0;
    if (oL <= L && R <= oR) return gain[ind];
    int mid = (L+R)/2;
    return max(q_gain(ind*2, L, mid, oL, oR), q_gain(ind*2+1, mid+1, R, oL, oR));
}
int q_dist(int ind, int L, int R, int oL, int oR) {
    if (oR < L || R < oL) return 0;
    if (oL <= L && R <= oR) return dist[ind];
    int mid = (L+R)/2;
    return q_dist(ind*2, L, mid, oL, oR) + q_dist(ind*2+1, mid+1, R, oL, oR);
}


main() {
	ifstream cin ("marathon.in");
	ofstream cout ("marathon.out");
	ios_base::sync_with_stdio(0); cin.tie(0);
	cin >> N >> Q;
	ffi cin >> loc[i].x >> loc[i].y;
	For (i, 1, N) up_dist(1, 0, N-1, i, get_dist(i-1, i));
	For (i, 1, N-1) {
	    up_gain(1, 0, N-1, i, get_dist(i-1, i)+get_dist(i, i+1)-get_dist(i-1, i+1));
	}

	//w<< "Dist:"; ffi w s q_dist(1, 0, N-1, i, i); w<<e;
    //w<< "Gain:"; ffi w s q_gain(1, 0, N-1, i, i); w<<e;
	For (q, 0, Q) {
        char a; cin >> a;
        if (a == 'U') {
            int j, x, y; cin >> j >> x >> y; j--;
            loc[j].x = x; loc[j].y = y;
            For (i, max(1, j-1), min(N-1, j+2)) {
                up_gain(1, 0, N-1, i, get_dist(i-1, i)+get_dist(i, i+1)-get_dist(i-1, i+1));
            }
            For (i, max(1, j), min(N, j+2)) up_dist(1, 0, N-1, i, get_dist(i-1, i));

            //w<< "Dist:"; ffi w s q_dist(1, 0, N-1, i, i); w<<e;
            //w<< "Gain:"; ffi w s q_gain(1, 0, N-1, i, i); w<<e;
        }
        else {
            int i, j; cin >> i >> j; i--; j--;
            int sub = 0;
            if (i < j-1) sub = q_gain(1, 0, N-1, i+1, j-1);
            w<< q_dist(1, 0, N-1, i+1, j)-sub<<e;
        }
	}
}