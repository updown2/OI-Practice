#include <bits/stdc++.h>
using namespace std;

#define int long long
//Global Variables
int N, A, B;
char grid[30][30];
bool visited[30][30];
priority_queue< pair<int, pair<int, int> > > next1; //(-moves, (x, y) )
int out = 0;

void add (int x, int y, int old_x, int old_y, int moves) {
	if (x < 0 || x >= N || y < 0 || y >= N || visited[x][y]) {
		return;
	}
	if (grid[x][y] == grid[old_x][old_y]) {
		next1.push(make_pair(moves-A, make_pair(x, y)));
	}
	else {
		next1.push(make_pair(moves-B, make_pair(x, y)));
	}
}

main() {
	ifstream cin ("distant.in");
	ofstream cout ("distant.out");
	
	cin >> N >> A >> B;
	for (int i=0; i<N; i++) {
		for (int j=0; j<N; j++) {
			cin >> grid[i][j];
		}
	}
	
	for (int i=0; i<N; i++) {
		for (int j=0; j<N; j++) {
			memset(visited, false, sizeof(visited) );
			next1.push(make_pair(0, make_pair(i, j)));
			while (!next1.empty()) {
				int moves = next1.top().first;
				int x = next1.top().second.first;
				int y = next1.top().second.second;
				next1.pop();
				
				if (visited[x][y]) {
					continue;
				}
				visited[x][y] = true;
				out = max(out, -moves);
				
				add(x-1, y, x, y, moves);
				add(x+1, y, x, y, moves);
				add(x, y-1, x, y, moves);
				add(x, y+1, x, y, moves);
			}
		}
	}
	
	cout << out << endl;
}
