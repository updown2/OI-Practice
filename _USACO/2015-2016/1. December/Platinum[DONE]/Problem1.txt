#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
#define For(i, a, b) for(ll i=a; i<b; i++)
#define ffi For(i, 0, N)
#define ffj For(j, 0, N)
#define ffa ffi ffj
#define s <<" "<<
#define w cout
#define e endl
#define pb push_back
#define mp make_pair
#define a first
#define b second
//500,000,000 operations
//Global Variables
int depth[100001];
int parent[100001];
vector<int> adj[100001];
int ancestor[100001][20];
int N, M;

void dfs(int x, int par) {
	parent[x] = par;
	depth[x] = depth[par]+1;
	
	For (i, 1, adj[x][0]+1) {
		if (adj[x][i] != par) {
			dfs(adj[x][i], x);
		}
	}
}


int LCA(int A, int B) {
	if (depth[A] > depth[B]) swap(A, B);
	int d = depth[B] - depth[A];
	For (i, 0, 18) {
		if (d&(1<<i) ) B = ancestor[B][i];
	}
	if (A == B) return A;
	
	for (int i=17; i>= 0; i--) {
		if (ancestor[A][i] != ancestor[B][i]) {
			A = ancestor[A][i];
			B = ancestor[B][i];
		}
	}
	return parent[A];
}

int flow[100001];
bool visited[100001];
void search(int at) {
	if (visited[at]) return;
	visited[at] = true;
	
	int curr = flow[at];
	For (i, 1, adj[at][0]+1) {
		if (depth[adj[at][i]] > depth[at]) {
			search(adj[at][i]);
			curr += flow[adj[at][i]];
		}
	}
	flow[at] = curr;
}



int main() {
	ifstream cin ("maxflow.in");
	ofstream cout ("maxflow.out");
	
	cin >> N >> M;
	For (i, 0, N+1) {
		adj[i].push_back(0);
		flow[i] = 0;
		visited[i] = false;
	}
	adj[0][0] = 1;
	adj[0].push_back(1);
	adj[1][0] = 1;
	adj[1].push_back(0);
	
	For (i, 2, N+1) {
		int a, b;
		cin >> a >> b;
		
		adj[a][0] ++;
		adj[a].push_back(b);
		
		adj[b][0] ++;
		adj[b].push_back(a);
	}
	depth[0] = 0;
	dfs(1, 0);
	
	For (i, 0, N+1) ancestor[i][0] = parent[i];
	
	For (k, 0, 17) {
		For (i, 1, N+1) ancestor[i][k+1] = ancestor[ancestor[i][k]][k];
	}
	
	For (i, 0, M) {
		int b, c;
		cin >> b >> c;
		flow[b]++;
		flow[c]++;
		flow[parent[LCA(b, c)]] --;
		flow[LCA(b, c)]--;
		//w<< b s c<<e;
		//w<<parent[LCA(b, c)]<<e;
	}
	//w<<e;For (i, 0, N+1) w<< flow[i]<<e;w<<e;
	
	search(0);
	//w<<e;For (i, 0, N+1) w<< flow[i]<<e;w<<e;
	int out = 0;
	For (i, 0, N+1) {
		out = max(out, flow[i]);
	}
	w<<out<<e;
	
	return 0;
}

