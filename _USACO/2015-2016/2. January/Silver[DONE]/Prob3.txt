#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
#define For(i, a, b) for(int i=a; i<b; i++)
#define ffi For(i, 0, N)
#define ffj For(j, 0, N)
#define s <<" "<<
#define w cout
#define e endl
#define pb push_back
//500,000,000 operations

//Global Variables
int N=4000;
int M;
int grid[4000][4000];
int at = 1;
queue<int> que1;
queue<int> que2;
int min_x = 2000;
int min_y = 2000;
int max_x = 2000;
int max_y = 2000;

void sss(int x, int y, int c) {
	if (grid[x][y] == 0) {
		grid[x][y] = c;
		if (x > min_x) {que1.push(x-1); que2.push(y);}
		if (x < max_x) {que1.push(x+1); que2.push(y);}
		if (y > min_y) {que1.push(x); que2.push(y-1);}
		if (y < max_y) {que1.push(x); que2.push(y+1);}
	}
}

void search(int i, int j) {
	if (grid[i][j] == 0) {
		que1.push(i);
		que2.push(j);
		while (!que1.empty()) {
			int x = que1.front();
			int y = que2.front();
			que1.pop();
			que2.pop();
			sss(x, y, at);
		}
		at++;
	}
}

int main() {
	ifstream cin ("gates.in");
	ofstream cout ("gates.out");
	
	cin >> M;
	int at_x = 2000;
	int at_y = 2000;
	ffi ffj grid[i][j] = 0;
	
	
	
	grid[at_x][at_y] = -1;
	For (i, 0, M) {
		char a;
		cin >> a;
		if (a == 'N') {
			grid[at_x-1][at_y] = -1;
			grid[at_x-2][at_y] = -1;
			at_x -= 2;
		}
		if (a == 'S') {
			grid[at_x+1][at_y] = -1;
			grid[at_x+2][at_y] = -1;
			at_x += 2;
		}
		if (a == 'E') {
			grid[at_x][at_y+1] = -1;
			grid[at_x][at_y+2] = -1;
			at_y += 2;
		}
		if (a == 'W') {
			grid[at_x][at_y-1] = -1;
			grid[at_x][at_y-2] = -1;
			at_y -= 2;
		}
		min_x = min(min_x, at_x);
		max_x = max(max_x, at_x);
		min_y = min(min_y, at_y);
		max_y = max(max_y, at_y);
	}
	min_x--;
	max_x++;
	min_y--;
	max_y++;
	/*For (i, 1993, 2002) {
		For (j, 1995, 2006) {
			w<<grid[i][j]<< " ";
		}w<<e;
	}*/
	
	For (i, min_x, max_x+1) 
		For (j, min_y, max_y+1)
			search(i, j);
	
	/*For (i, 1993, 2002) {
		For (j, 1995, 2006) {
			w<<grid[i][j]<< " ";
		}w<<e;
	}*/
	w<<at-2<<e;
	
	return 0;
}

